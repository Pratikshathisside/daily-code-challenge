class Solution{
    private:
    bool isSafe(int x,int  y, int n , vector<vector<int>>visited,vector<vector<int>> m){
    if((x>=0 && x<=n-1)&&(y>=0 && y<=n-1) && (visited[x][y]==0) && (m[x][y]==1)){
       return true; 
    }
       else{
           return false;
       }

void solve(vector<vector<int>> m,vector<int>&ans, int n,int x,int  y ,vector<vector<int>> visited, string path ){
    //base case
    if(x==n-1 && y==n-1 ){
        ans.push_back(path);
        return ;
    }
    visited[x][y] = 1;
    
    //4 choices - d,,r,l,u
    //down
    int newx = x+1;
    int newy = y;
    if( isSafe(newx, newy, n , visited, m)){
        path.push_back("D");
        solve(m ,ans, n,srcx, srcy ,visited, path );
        path.pop_back();
    }
    newx = x;
    newy = y - 1;
    if( isSafe(newx, newy, n , visited, m)){
        path.push_back('l');
        solve(m , ans, n,srcx, srcy ,visited, path );
        path.pop_back();
    }
    //right
    newx = x+1;
    newy = y ;
    if( isSafe(newx, newy, n , visited, m)){
        path.push_back('r');
        solve(m ,ans, n,srcx, srcy ,visited, path );
        path.pop_back();
    }
    //up
    newx = x-1;
    newy = y;
    if( isSafe(newx, newy, n , visited, m )){
        path.push_back('u');
        solve(m ,ans, n,srcx, srcy ,visited, path );
        path.pop_back();
    }
    
}
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
         if(m[0][0]== 0){
        return ans;
    }
    vector<strng>ans;
    int srcx = 0;
    int srcy = 0;
    vector<vector<int>> visited = m;
    for(int  i = 0; i<n); i++){
        for(int  j = 0 ; j<n ; j++){
            visited[i][j]= 0;
        }
    }
    string path = "";
    solve(m , ans,n,srcx, srcy ,visited, path );
    sort(ans.begin(), ans.end());
    retrun ans;
    }
    }
};
